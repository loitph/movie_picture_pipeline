name: Backend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  PYTHON_VERSION: '3.10'

jobs:
  linting-job:
    runs-on: ubuntu-latest

    steps:
    - name: Checking out
      uses: actions/checkout@v4

    - name: Setting up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setting up Python virtual environment
      run: |
        cd backend
        pip install pipenv

    - name: Installing package dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Linting Job
      run: |
        cd backend
        pipenv run flake8 .
  testing-job:
    runs-on: ubuntu-latest

    steps:
    - name: Checking out
      uses: actions/checkout@v4

    - name: Setting up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setting up Python virtual environment
      run: |
        cd backend
        pip install pipenv

    - name: Installing package dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Testing backend
      run: |
        cd backend
        pipenv run pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [linting-job, testing-job]

    steps:
    - name: Checking out
      uses: actions/checkout@v4

    - name: Setting up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setting up Python virtual environment
      run: |
        cd backend
        pip install pipenv

    - name: Installing package dependencies
      run: |
        cd backend
        pipenv install --dev

    - name: Docker build repository
      env:
        IMAGE_TAG: latest
        REPOSITORY: movie-picture-be # refer backend deployment file
      run: |
        cd backend
        docker build -t $REPOSITORY .
        
    - name: Configuring secrets to AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Access to AWS ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Docker tagging image
      env:
        IMAGE_TAG: latest
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: movie-picture-be # refer backend deployment file
      run: docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Docker pushing image to ECR AWS
      env:
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: movie-picture-be # refer backend deployment file
        IMAGE_TAG: latest
      run: docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Login to EKS Cluster
      env:
        CLUSTER_NAME: my-cluster
        REGION: ${{ secrets.AWS_REGION }}
      run: aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    
    - name: Kustomizing Image
      env:
        IMAGE_TAG: latest
        REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        REPOSITORY: movie-picture-be # refer backend deployment file
      run: |
        cd backend/k8s
        kustomize edit set image $REPOSITORY=$REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Kustomizing application build
      run: |
        cd backend/k8s
        kustomize build | kubectl apply -f -